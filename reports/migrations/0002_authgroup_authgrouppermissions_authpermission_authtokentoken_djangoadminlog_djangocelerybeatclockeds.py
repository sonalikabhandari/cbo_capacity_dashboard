# Generated by Django 2.2.9 on 2020-05-08 20:13

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('reports', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthtokenToken',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'authtoken_token',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatClockedschedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clocked_time', models.DateTimeField()),
                ('enabled', models.IntegerField()),
            ],
            options={
                'db_table': 'django_celery_beat_clockedschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatCrontabschedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minute', models.CharField(max_length=240)),
                ('hour', models.CharField(max_length=96)),
                ('day_of_week', models.CharField(max_length=64)),
                ('day_of_month', models.CharField(max_length=124)),
                ('month_of_year', models.CharField(max_length=64)),
                ('timezone', models.CharField(max_length=63)),
            ],
            options={
                'db_table': 'django_celery_beat_crontabschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatIntervalschedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('every', models.IntegerField()),
                ('period', models.CharField(max_length=24)),
            ],
            options={
                'db_table': 'django_celery_beat_intervalschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatPeriodictask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('task', models.CharField(max_length=200)),
                ('args', models.TextField()),
                ('kwargs', models.TextField()),
                ('queue', models.CharField(blank=True, max_length=200, null=True)),
                ('exchange', models.CharField(blank=True, max_length=200, null=True)),
                ('routing_key', models.CharField(blank=True, max_length=200, null=True)),
                ('expires', models.DateTimeField(blank=True, null=True)),
                ('enabled', models.IntegerField()),
                ('last_run_at', models.DateTimeField(blank=True, null=True)),
                ('total_run_count', models.PositiveIntegerField()),
                ('date_changed', models.DateTimeField()),
                ('description', models.TextField()),
                ('one_off', models.IntegerField()),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('priority', models.PositiveIntegerField(blank=True, null=True)),
                ('headers', models.TextField()),
                ('expire_seconds', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'django_celery_beat_periodictask',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatPeriodictasks',
            fields=[
                ('ident', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('last_update', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_celery_beat_periodictasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatSolarschedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(max_length=24)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
            ],
            options={
                'db_table': 'django_celery_beat_solarschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryResultsTaskresult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(max_length=255, unique=True)),
                ('status', models.CharField(max_length=50)),
                ('content_type', models.CharField(max_length=128)),
                ('content_encoding', models.CharField(max_length=64)),
                ('result', models.TextField(blank=True, null=True)),
                ('date_done', models.DateTimeField()),
                ('traceback', models.TextField(blank=True, null=True)),
                ('meta', models.TextField(blank=True, null=True)),
                ('task_args', models.TextField(blank=True, null=True)),
                ('task_kwargs', models.TextField(blank=True, null=True)),
                ('task_name', models.CharField(blank=True, max_length=255, null=True)),
                ('worker', models.CharField(blank=True, max_length=100, null=True)),
                ('date_created', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_celery_results_taskresult',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RestFrameworkTrackingApirequestlog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_at', models.DateTimeField()),
                ('response_ms', models.PositiveIntegerField()),
                ('path', models.CharField(max_length=200)),
                ('remote_addr', models.CharField(max_length=39)),
                ('host', models.CharField(max_length=200)),
                ('method', models.CharField(max_length=10)),
                ('query_params', models.TextField(blank=True, null=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('response', models.TextField(blank=True, null=True)),
                ('status_code', models.PositiveIntegerField(blank=True, null=True)),
                ('view', models.CharField(blank=True, max_length=200, null=True)),
                ('view_method', models.CharField(blank=True, max_length=27, null=True)),
                ('errors', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'rest_framework_tracking_apirequestlog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UsersBulkpermissionstore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'users_bulkpermissionstore',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UsersBulkpermissionstoreGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'users_bulkpermissionstore_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UsersUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
                ('department', models.CharField(blank=True, max_length=255, null=True)),
                ('telephone', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'users_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UsersUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'users_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UsersUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'users_user_user_permissions',
                'managed': False,
            },
        ),
    ]
